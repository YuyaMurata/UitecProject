package code;

public class MPSC {
	public static final int signal[] = {0, 1};
	//自動生成する予定
	public static final int defaultMPS[][][][] =
		{
			{	{{/*GF(0)*/}}	},
			{	{{/*GF(1)*/}}	},
			{	{{/*GF(2)*/}}	},
			{	 /*GF(3)*/
				{{0, 3, 6},{1, 4, 7},{2, 5, 8}},
				{{0, 4, 8},{1, 5, 6},{2, 3, 7}},
				{{0, 5, 7},{1, 3, 8},{2, 4, 6}}
			},
			{	 /*GF(2^2)*/
				{{0, 4, 8, 12}, {1, 5, 9, 13}, {2, 6, 10, 14}, {3, 7, 11, 15}}	,
				{{0, 5, 10, 15}, {1, 4, 11, 14}	, {2, 7, 8, 13}, {3, 6, 9, 12}}	,
				{{0, 6, 11, 13}, {1, 7, 10, 12}	, {2, 4, 9, 15}, {3, 5, 8, 14}}	,
				{{0, 7, 9, 14}, {1, 6, 8, 15}, {2, 5, 11, 12}, {3, 4, 10, 13}}
			},
			{	 /*GF(5)*/
				{{0,5,10,15,20},{1,6,11,16,21},{2,7,12,17,22},{3,8,13,18,23},{4,9,14,19,24}},
				{{0,6,12,18,24},{1,7,13,19,20},{2,8,14,15,21},{3,9,10,16,22},{4,5,11,17,23}},
				{{0,7,14,16,23},{1,8,10,17,24},{2,9,11,18,20},{3,5,12,19,21},{4,6,13,15,22}},
				{{0,8,11,19,22},{1,9,12,15,23},{2,5,13,16,24},{3,6,14,17,20},{4,7,10,18,21}},
				{{0,9,13,17,21},{1,5,14,18,22},{2,6,10,19,23},{3,7,11,15,24},{4,8,12,16,20}}
			},
			{	{{/*GF(6)*/}}	},
			{	/*GF(7)*/
				{{0,7,14,21,28,35,42},{1,8,15,22,29,36,43},{2,9,16,23,30,37,44},{3,10,17,24,31,38,45},{4,11,18,25,32,39,46},{5,12,19,26,33,40,47},{6,13,20,27,34,41,48}},
				{{0,8,16,24,32,40,48},{1,9,17,25,33,41,42},{2,10,18,26,34,35,43},{3,11,19,27,28,36,44},{4,12,20,21,29,37,45},{5,13,14,22,30,38,46},{6,7,15,23,31,39,47}},
				{{0,9,18,27,29,38,47},{1,10,19,21,30,39,48},{2,11,20,22,31,40,42},{3,12,14,23,32,41,43},{4,13,15,24,33,35,44},{5,7,16,25,34,36,45},{6,8,17,26,28,37,46}},
				{{0,10,20,23,33,36,46},{1,11,14,24,34,37,47},{2,12,15,25,28,38,48},{3,13,16,26,29,39,42},{4,7,17,27,30,40,43},{5,8,18,21,31,41,44},{6,9,19,22,32,35,45}},
				{{0,11,15,26,30,41,45},{1,12,16,27,31,35,46},{2,13,17,21,32,36,47},{3,7,18,22,33,37,48},{4,8,19,23,34,38,42},{5,9,20,24,28,39,43},{6,10,14,25,29,40,44}},
				{{0,12,17,22,34,39,44},{1,13,18,23,28,40,45},{2,7,19,24,29,41,46},{3,8,20,25,30,35,47},{4,9,14,26,31,36,48},{5,10,15,27,32,37,42},{6,11,16,21,33,38,43}},
				{{0,13,19,25,31,37,43},{1,7,20,26,32,38,44},{2,8,14,27,33,39,45},{3,9,15,21,34,40,46},{4,10,16,22,28,41,47},{5,11,17,23,29,35,48},{6,12,18,24,30,36,42}}
			},
			{  	/*GF(2^3)*/
				{{0,8,16,24,32,40,48,56},{1,9,17,25,33,41,49,57},{2,10,18,26,34,42,50,58},{3,11,19,27,35,43,51,59},{4,12,20,28,36,44,52,60},{5,13,21,29,37,45,53,61},{6,14,22,30,38,46,54,62},{7,15,23,31,39,47,55,63}},
				{{0,9,18,27,36,45,54,63},{1,8,20,31,34,46,53,59},{2,12,16,29,33,43,55,62},{3,15,21,24,38,42,52,57},{4,10,17,30,32,47,51,61},{5,14,19,26,39,40,49,60},{6,13,23,28,35,41,48,58},{7,11,22,25,37,44,50,56}},
				{{0,10,19,28,37,46,55,57},{1,12,23,26,38,45,51,56},{2,8,21,25,35,47,54,60},{3,13,16,30,34,44,49,63},{4,9,22,24,39,43,53,58},{5,11,18,31,32,41,52,62},{6,15,20,27,33,40,50,61},{7,14,17,29,36,42,48,59}},
				{{0,11,20,29,38,47,49,58},{1,15,18,30,37,43,48,60},{2,13,17,27,39,46,52,56},{3,8,22,26,36,41,55,61},{4,14,16,31,35,45,50,57},{5,10,23,24,33,44,54,59},{6,12,19,25,32,42,53,63},{7,9,21,28,34,40,51,62}},
				{{0,12,21,30,39,41,50,59},{1,10,22,29,35,40,52,63},{2,9,19,31,38,40,52,61},{3,14,18,28,33,47,53,56},{4,8,23,27,37,42,49,62},{5,15,16,25,36,46,51,58},{6,11,17,24,34,45,55,60},{7,13,20,26,32,43,54,57}},
				{{0,13,22,31,33,42,51,60},{1,14,21,27,32,44,55,58},{2,11,23,30,32,44,53,57},{3,10,20,25,39,45,48,62},{4,15,19,29,34,41,54,56},{5,8,17,28,38,43,50,63},{6,9,16,26,37,47,52,59},{7,12,18,24,35,46,49,61}},
				{{0,14,23,25,34,43,52,61},{1,13,19,24,36,47,50,62},{2,15,22,24,36,45,49,59},{3,12,17,31,37,40,54,58},{4,11,21,26,33,46,48,63},{5,9,20,30,35,42,55,56},{6,8,18,29,39,44,51,57},{7,10,16,27,38,41,53,60}},
				{{0,15,17,26,35,44,53,62},{1,11,16,28,39,42,54,61},{2,14,16,28,37,41,51,63},{3,9,23,29,32,46,50,60},{4,13,18,25,38,40,55,59},{5,12,22,27,34,47,48,57},{6,10,21,31,36,43,49,56},{7,8,19,30,33,45,52,58}},
			}
		};

	//内部での符号語の格納　code[Group Info][Number Of Codes][CodeWord]
	private int[][][] code;

	//MPSの生成とCodeの初期化
	private int p;
	private int mps[][][];
	public MPSC(int p) {
		// TODO 自動生成されたコンストラクター・スタブ
		this.p = p;
		this.mps = defaultMPS[p];

		if(mps.length == 1) {
			System.err.println("Error : 設定されていないpが選択されました．");
			System.exit(0);
		}

		int groupInfo = p;
		int numOfCodes = p;
		int codeLength = p*p;

		this.code = new int[groupInfo][numOfCodes][codeLength];

		//Codeの初期化
		for(int i=0; i < groupInfo; i++)
			for(int j=0; j < numOfCodes; j++)
				for(int k=0; k < codeLength; k++)
					this.code[i][j][k] = 0;

		//符号語生成用のスクリプト
		generate();
	}

	//MPSからMPSCを生成しcodeに代入．
	private void generate(){
		for(int i=0; i < code.length; i++)
			for(int j=0; j < code[i].length; j++)
				for(int k=0; k < mps[i][j].length; k++)
					this.code[i][j][mps[i][j][k]] = 1;
	}

	//MPSの取得．
	public int[] getMPS(int no){
		return mps[no / p][no % p];
	}
	//MPSCの取得　配列の取得．
	public int[] getMPSC(int no){
		return code[no / p][no % p];
	}
	//MPSCの取得　チップの取得．
	public int getMPSC(int no, int i){
		return code[no / p][no % p][i];
	}

	//生成符号語の出力用
	public static String toString(int[][][] code){
		StringBuilder sb = new StringBuilder();
		for(int i=0; i < code.length; i++){
			for(int j=0; j < code[i].length; j++){
				sb.append("Group ");
				sb.append(i);
				sb.append(".");
				sb.append(j);
				sb.append(":");
				for(int k=0; k < code[i][j].length; k++){
					if(k %  code.length== 0) sb.append(" ");
					sb.append(code[i][j][k]);
				}
				sb.append("\n");
			}
		}
		return sb.toString();
	}

	/* Test用
	public static void main(String[] args) {
		MPSC mp = new MPSC(4);

		//System.out.println(toString(mp.code));
	} */
}
